BveTs Map 2.02

// 閉塞を設置する。また、一つ後の閉塞に対する ATS 地上子を設置する。
//
// このファイルで設置する地上子は現地点 ($location) にある閉塞に対する地上子ではなく
// 一つ後の閉塞 ($following_section_location_1) に対する地上子である。
// これらの地上子を二つ以上手前の閉塞に設置すると地上子が情報を送信する閉塞の
// インデックスがずれるので、一つ手前の閉塞の位置 ($location) が確定してから
// その位置に応じて地上子を設置する。
//
// このファイルを include する前に以下の変数を設定しておく必要がある。
//  $_fake = 閉塞や地上子を本当に設置するなら 0、設置しないなら 1。
//  $location = 現在位置 (Section.Begin 文を置く位置)
//  $has_cab_signal = 車内信号式なら 1、線路脇信号式なら 0。
//  $is_std_signal = 通常の信号インデックス 0, ..., 5 を使用する路線なら 1、それ以外なら 0。
//  $is_csatc = CS-ATC 路線なら 1、それ以外なら 0。
//  $following_section_location_1 = 一つ後の閉塞の開始位置
//  $following_section_location_2 = 二つ後の閉塞の開始位置
//  $following_section_location_3, ..., $following_section_location_7 =
//    同様に、七つ後までの閉塞の開始位置
//  $following_section_signal_1 = 一つ後の閉塞のさらに一つ先の閉塞に
//    先行列車がいる時の、一つ後の閉塞の信号インデックス
//  $following_section_signal_2 = 一つ後の閉塞のさらに二つ先の閉塞に
//    先行列車がいる時の、一つ後の閉塞の信号インデックス
//  $following_section_signal_3, ..., $following_section_signal_7 =
//    同様に、先の閉塞に先行列車がいる時の、一つ後の閉塞の信号インデックス
//  $signal_speed_1, ..., $signal_speed_4 =
//    信号インデックス 1, ..., 4 の制限速度 (km/h)
//  $ats_stop_beacon_type = ATS-P 即時停止地上子の種別番号
//  $ats_stop_beacon_section = ATS-P 即時停止地上子に対応させる閉塞
//  $ats_update_1_beacon_type = ATS-P パターン更新地上子の種別番号
//  $ats_update_1_beacon_value = ATS-P パターン更新地上子に送る値
//  $ats_update_2_beacon_type = ATS-P パターン更新地上子の種別番号
//  $ats_update_2_beacon_value = ATS-P パターン更新地上子に送る値
//  $ats_update_m1_beacon_type = ATS-P パターン更新地上子の種別番号
//  $ats_update_m1_beacon_value = ATS-P パターン更新地上子に送る値
//  $ats_update_transponder = ATS-P パターン更新地上子ストラクチャーキー
//
// なお $location と $following_section_location_1 は 30 メートル以上離れていなければならない
//
// このファイルの中で以下の変数が変更される。
//  $_aspects = この閉塞の信号機が現示しうる信号インデックスのリスト。
//    例えば現示しうる信号インデックスが 0, 1, 2, 4 なら値は 4021 となる。
//  $_bulbs = この信号機の灯数
//  $following_section_location_1 = この閉塞の開始位置 (= $location)
//  $following_section_location_2 = 一つ後の閉塞の開始位置
//  $following_section_location_3 = 二つ後の閉塞の開始位置
//  $following_section_location_4, ..., $following_section_location_7 =
//    同様に、七つ後までの閉塞の開始位置
//  $following_section_signal_1 = この閉塞のさらに一つ先の閉塞に
//    先行列車がいる時の、この閉塞の信号インデックス
//  $following_section_signal_2 = この閉塞のさらに二つ先の閉塞に
//    先行列車がいる時の、この閉塞の信号インデックス
//  $following_section_signal_3, ..., $following_section_signal_7 =
//    同様に、先の閉塞に先行列車がいる時の、この閉塞の信号インデックス
// ただし、$_fake が 1 に設定されていた場合は閉塞や地上子は設置されず
// これらの変数も変更されない。

// まずは $is_std_signal な路線用の計算を行う
// ここら辺の計算手法の詳細は↓を参照のこと
// https://github.com/magicant/bve-random-map/issues/5
$__v1 = sqrt(18 * ($following_section_location_1 - 30 - $location));
$__v2 = sqrt(18 * ($following_section_location_2 - 30 - $location));
$__v3 = sqrt(18 * ($following_section_location_3 - 30 - $location));
$__v4 = sqrt(18 * ($following_section_location_4 - 30 - $location));
$__v5 = sqrt(18 * ($following_section_location_5 - 30 - $location));
$__v6 = sqrt(18 * ($following_section_location_6 - 30 - $location));
$__v7 = sqrt(18 * ($following_section_location_7 - 30 - $location));
$__c1 = ceil(floor($__v1 / $signal_speed_1) / 65536)
      + ceil(floor($__v1 / $signal_speed_2) / 65536)
      + ceil(floor($__v1 / $signal_speed_3) / 65536)
      + ceil(floor($__v1 / $signal_speed_4) / 65536);
$__c2 = ceil(floor($__v2 / $signal_speed_1) / 65536)
      + ceil(floor($__v2 / $signal_speed_2) / 65536)
      + ceil(floor($__v2 / $signal_speed_3) / 65536)
      + ceil(floor($__v2 / $signal_speed_4) / 65536);
$__c3 = ceil(floor($__v3 / $signal_speed_1) / 65536)
      + ceil(floor($__v3 / $signal_speed_2) / 65536)
      + ceil(floor($__v3 / $signal_speed_3) / 65536)
      + ceil(floor($__v3 / $signal_speed_4) / 65536);
$__c4 = ceil(floor($__v4 / $signal_speed_1) / 65536)
      + ceil(floor($__v4 / $signal_speed_2) / 65536)
      + ceil(floor($__v4 / $signal_speed_3) / 65536)
      + ceil(floor($__v4 / $signal_speed_4) / 65536);
$__c5 = ceil(floor($__v5 / $signal_speed_1) / 65536)
      + ceil(floor($__v5 / $signal_speed_2) / 65536)
      + ceil(floor($__v5 / $signal_speed_3) / 65536)
      + ceil(floor($__v5 / $signal_speed_4) / 65536);
$__c6 = ceil(floor($__v6 / $signal_speed_1) / 65536)
      + ceil(floor($__v6 / $signal_speed_2) / 65536)
      + ceil(floor($__v6 / $signal_speed_3) / 65536)
      + ceil(floor($__v6 / $signal_speed_4) / 65536);
$__c7 = ceil(floor($__v7 / $signal_speed_1) / 65536)
      + ceil(floor($__v7 / $signal_speed_2) / 65536)
      + ceil(floor($__v7 / $signal_speed_3) / 65536)
      + ceil(floor($__v7 / $signal_speed_4) / 65536);
$__h1 = $__c1;
$__h2 = $__c2 + floor($following_section_signal_1 / 4);
$__h3 = $__c3 + floor($following_section_signal_2 / 4);
$__h4 = $__c4 + floor($following_section_signal_3 / 4);
$__h5 = $__c5 + floor($following_section_signal_4 / 4);
$__h6 = $__c6 + floor($following_section_signal_5 / 4);
$__h7 = $__c7 + floor($following_section_signal_6 / 4);
// $__j1 = min($__h1, 2)
$__j1 = ($__h1 + 2 - abs($__h1 - 2)) / 2;
// $__j[n] = min($__h[n], $following_section_signal_[n-1] + 2)
$__j2 = ($__h2 + $following_section_signal_1 + 2 - abs($__h2 - $following_section_signal_1 - 2)) / 2;
$__j3 = ($__h3 + $following_section_signal_2 + 2 - abs($__h3 - $following_section_signal_2 - 2)) / 2;
$__j4 = ($__h4 + $following_section_signal_3 + 2 - abs($__h4 - $following_section_signal_3 - 2)) / 2;
$__j5 = ($__h5 + $following_section_signal_4 + 2 - abs($__h5 - $following_section_signal_4 - 2)) / 2;
$__j6 = ($__h6 + $following_section_signal_5 + 2 - abs($__h6 - $following_section_signal_5 - 2)) / 2;
$__j7 = ($__h7 + $following_section_signal_6 + 2 - abs($__h7 - $following_section_signal_6 - 2)) / 2;
$__indexes = $__j1 * 10
           + $__j2 * 100
           + $__j3 * 1000
           + $__j4 * 10000
           + $__j5 * 100000;
           // 桁数を増やし過ぎると誤差が出るので 6 桁までにしておく
           // + $__j6 * 1000000
           // + $__j7 * 10000000;

// 信号機が出しうる現示を求める
$__1 = ($__j1 - 1) * ($__j2 - 1) * ($__j3 - 1) * ($__j4 - 1)
     * ($__j5 - 1) * ($__j6 - 1) * ($__j7 - 1);
$__2 = ($__j1 - 2) * ($__j2 - 2) * ($__j3 - 2) * ($__j4 - 2)
     * ($__j5 - 2) * ($__j6 - 2) * ($__j7 - 2);
$__3 = ($__j1 - 3) * ($__j2 - 3) * ($__j3 - 3) * ($__j4 - 3)
     * ($__j5 - 3) * ($__j6 - 3) * ($__j7 - 3);
$__4 = ($__j1 - 4) * ($__j2 - 4) * ($__j3 - 4) * ($__j4 - 4)
     * ($__j5 - 4) * ($__j6 - 4) * ($__j7 - 4)
     * ($__j1 - 5) * ($__j2 - 5) * ($__j3 - 5) * ($__j4 - 5)
     * ($__j5 - 5) * ($__j6 - 5) * ($__j7 - 5);
$_aspects = (1 - ceil(abs($__1 / 1073741824)))
          + (1 - ceil(abs($__2 / 1073741824))) * 20
          + (1 - ceil(abs($__3 / 1073741824))) * 300
          + (1 - ceil(abs($__4 / 1073741824 / 1073741824))) * 4000;

// 信号機の灯数を求める
$__2 = $_aspects * ($_aspects - 20); // * ($_aspects - 4000);
$__3 = $_aspects - 4020;
$__4 = ($_aspects - 4320) * ($_aspects - 4021);
$__2 = ceil(abs($__2 / 1073741824));
$__3 = ceil(abs($__3 / 1073741824));
$__4 = ceil(abs($__4 / 1073741824));
$__5 = 1 - $__2 * $__3 * $__4;
$_bulbs = (1 - $__2) * 2 + (1 - $__3) * 3 + (1 - $__4) * 4 + (1 - $__5) * 5;

// BVE には if 文がなく、閉塞を置かないということはできないので、
// $_fake のときは埒外の場所に閉塞を置く。
$location;
distance + $_fake * $max_location;
	Section.Begin(0,
		$is_std_signal * $__j1 + $is_csatc * 10,
		$is_std_signal * $__j2 + $is_csatc * $following_section_signal_1,
		$is_std_signal * $__j3 + $is_csatc * $following_section_signal_2,
		$is_std_signal * $__j4 + $is_csatc * $following_section_signal_3,
		$is_std_signal * $__j5 + $is_csatc * $following_section_signal_4,
		$is_std_signal * $__j6 + $is_csatc * $following_section_signal_5,
		$is_std_signal * $__j7 + $is_csatc * $following_section_signal_6);
	// TODO 閉塞標識ストラクチャーを設置する

// $__v[n] = min($__v[n], $max_speed)
$__v1 = ($__v1 + $max_speed - abs($__v1 - $max_speed)) / 2;
$__v2 = ($__v2 + $max_speed - abs($__v2 - $max_speed)) / 2;
$__v3 = ($__v3 + $max_speed - abs($__v3 - $max_speed)) / 2;
$__v4 = ($__v4 + $max_speed - abs($__v4 - $max_speed)) / 2;
$__v5 = ($__v5 + $max_speed - abs($__v5 - $max_speed)) / 2;
$__v6 = ($__v6 + $max_speed - abs($__v6 - $max_speed)) / 2;
$__v7 = ($__v7 + $max_speed - abs($__v7 - $max_speed)) / 2;

// CS-ATC 用に $__j[n] を計算する
$__c1 = floor($__v1 / 5) + 10;
$__c2 = floor($__v2 / 5) + 10;
$__c3 = floor($__v3 / 5) + 10;
$__c4 = floor($__v4 / 5) + 10;
$__c5 = floor($__v5 / 5) + 10;
$__c6 = floor($__v6 / 5) + 10;
$__c7 = floor($__v7 / 5) + 10;
// $__h[n] = min($__c[n], 33)
$__h1 = ($__c1 + 33 - abs($__c1 - 33)) / 2;
$__h2 = ($__c2 + 33 - abs($__c2 - 33)) / 2;
$__h3 = ($__c3 + 33 - abs($__c3 - 33)) / 2;
$__h4 = ($__c4 + 33 - abs($__c4 - 33)) / 2;
$__h5 = ($__c5 + 33 - abs($__c5 - 33)) / 2;
$__h6 = ($__c6 + 33 - abs($__c6 - 33)) / 2;
$__h7 = ($__c7 + 33 - abs($__c7 - 33)) / 2;
$__j1 = $is_std_signal * $__j1 + $is_csatc * $__h1;
$__j2 = $is_std_signal * $__j2 + $is_csatc * $__h2;
$__j3 = $is_std_signal * $__j3 + $is_csatc * $__h3;
$__j4 = $is_std_signal * $__j4 + $is_csatc * $__h4;
$__j5 = $is_std_signal * $__j5 + $is_csatc * $__h5;
$__j6 = $is_std_signal * $__j6 + $is_csatc * $__h6;
$__j7 = $is_std_signal * $__j7 + $is_csatc * $__h7;

// 現示更新地上子
$location + 0.01;
distance + $_fake * $max_location;
	Beacon.Put(1012, 1, $__indexes * $is_std_signal);

// 即時停止地上子
$following_section_location_1 - 25;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_stop_beacon_type, $ats_stop_beacon_section, 0);

// 現示更新地上子
$following_section_location_1 - 25;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);
$following_section_location_1 - 50;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);
$following_section_location_1 - 85;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);
$following_section_location_1 - 130;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);
$following_section_location_1 - 180;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);
$following_section_location_1 - 280;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);
$following_section_location_1 - 600;
(distance + $location + abs(distance - $location)) / 2; // max(distance, $location)
distance + $_fake * $max_location;
	Beacon.Put($ats_update_1_beacon_type, 1, $ats_update_1_beacon_value);
	Beacon.Put($ats_update_2_beacon_type, 2, $ats_update_2_beacon_value);
	Beacon.Put($ats_update_m1_beacon_type, -1, $ats_update_m1_beacon_value);
distance - 3;
	Structure[$ats_update_transponder].Put0(0, 3, 0);

$following_section_location_7 = $_fake * $following_section_location_7 + (1 - $_fake) * $following_section_location_6;
$following_section_location_6 = $_fake * $following_section_location_6 + (1 - $_fake) * $following_section_location_5;
$following_section_location_5 = $_fake * $following_section_location_5 + (1 - $_fake) * $following_section_location_4;
$following_section_location_4 = $_fake * $following_section_location_4 + (1 - $_fake) * $following_section_location_3;
$following_section_location_3 = $_fake * $following_section_location_3 + (1 - $_fake) * $following_section_location_2;
$following_section_location_2 = $_fake * $following_section_location_2 + (1 - $_fake) * $following_section_location_1;
$following_section_location_1 = $_fake * $following_section_location_1 + (1 - $_fake) * $location;
$following_section_signal_1 = $_fake * $following_section_signal_1 + (1 - $_fake) * $__j1;
$following_section_signal_2 = $_fake * $following_section_signal_2 + (1 - $_fake) * $__j2;
$following_section_signal_3 = $_fake * $following_section_signal_3 + (1 - $_fake) * $__j3;
$following_section_signal_4 = $_fake * $following_section_signal_4 + (1 - $_fake) * $__j4;
$following_section_signal_5 = $_fake * $following_section_signal_5 + (1 - $_fake) * $__j5;
$following_section_signal_6 = $_fake * $following_section_signal_6 + (1 - $_fake) * $__j6;
$following_section_signal_7 = $_fake * $following_section_signal_7 + (1 - $_fake) * $__j7;
